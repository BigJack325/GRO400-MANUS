# import the necessary packages
from collections import deque
from imutils.video import VideoStream
import numpy as np
import cv2
import imutils
import time

# set up

# Colors
GREEN = (0, 255, 0)
RED = (0, 0, 255)
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
YELLOW = (0, 255, 255)

new_width = 600
# variables for distance(cm)
img_ref = 'ref.jpg'

#variable pour focal length
measured_distance = 24.0 #distance de l'objet dans la photo
real_width = 6.8 #largeur de l'objet dans la photo
Width_in_rf_image = None #largeur de l'objet en pixel dans l'image,a trouver selon l'image
focal_length = None
fonts = cv2.FONT_HERSHEY_COMPLEX
# define the lower and upper boundaries of the "green"
# ball in the HSV color space, then initialize the
# list of tracked points

Lower = (150, 150, 150)
Upper = (255, 255, 255)

# focal length finder function
def Focal_Length_Finder(measured_distance1, real_width1, width_in_rf_image1):
 
    # finding the focal length
    focal_length = (width_in_rf_image1 * measured_distance1) / real_width1
    return focal_length


def Distance_finder(Focal_Length, real_object_width, object_width_in_frame):
 
    distance = (real_object_width * Focal_Length)/object_width_in_frame
    return distance

def pixel_width_finder(img):
    
    # Read the picure - The 1 means we want the image in BGR
    img = cv2.imread(img, 1) 
    # resize imag 
    img = imutils.resize(img, width = new_width)
    img = cv2.GaussianBlur(img, (11, 11), 0)
    # convert BGR image to a HSV image
    hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
    
    mask = cv2.inRange(hsv, Lower, Upper)
    mask = cv2.erode(mask, None, iterations=2)
    mask = cv2.dilate(mask, None, iterations=2)
    
    pixel_width = sum(mask.any(axis = 0))
    
    #cv2.imshow('img',mask)
    return pixel_width

#trouve la largeur de l'objet dans l'image reference
Width_in_rf_image = pixel_width_finder(img_ref)
Focal_length = Focal_Length_Finder(measured_distance, real_width, Width_in_rf_image)


# commence le vidéo et laisse le temps à la caméra de s'ouvrir
vs = VideoStream(src=0).start()

time.sleep(2.0)

# keep looping
while True:
    # grab the current frame
    frame = vs.read()

	# resize the frame, blur it, and convert it to the HSV
	# color space
    frame = imutils.resize(frame, width=new_width)
    blurred = cv2.GaussianBlur(frame, (11, 11), 0)
    hsv = cv2.cvtColor(blurred, cv2.COLOR_BGR2HSV)
	# construct a mask for the color "green", then perform
	# a series of dilations and erosions to remove any small
	# blobs left in the mask
    mask = cv2.inRange(hsv, Lower, Upper)
    mask = cv2.erode(mask, None, iterations=2)
    mask = cv2.dilate(mask, None, iterations=2)
	
	# find contours in the mask and initialize the current
	# (x, y) center of the ball
	
    
    cnts = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)
    cnts = imutils.grab_contours(cnts)
    center = None
	# only proceed if at least one contour was found
    if len(cnts) > 0:
        
        #Trouve la largeur en pixel de l'objet
        pixel_width = sum(mask.any(axis = 0))
    
        #print('Width in pixel: ', pixel_width)
    
    
		# find the largest contour in the mask, then use
		# it to compute the minimum enclosing circle and
		# centroid
        c = max(cnts, key=cv2.contourArea)
        ((x, y), radius) = cv2.minEnclosingCircle(c)
        M = cv2.moments(c)
        center = (int(M["m10"] / M["m00"]), int(M["m01"] / M["m00"]))
		# only proceed if the radius meets a minimum size
        #print(center)
        #Distance = Distance_finder(Focal_length_found, Known_width, face_width_in_frame)
        Distance = Distance_finder(Focal_length, real_width, pixel_width)
        #print(x,y,center)
        if radius > 10:
			# draw the circle and centroid on the frame,
			# then update the list of tracked points
			
			#cercle autour de l'objet
            cv2.circle(frame, (int(x), int(y)), int(radius),YELLOW, 2) 
            
            #point rouge au centre
            cv2.circle(frame, center, 5, RED, -1)
            
            #pour imprimer le texte
            cv2.line(frame, (30, 30), (230, 30), RED, 32)
            cv2.line(frame, (30, 30), (230, 30), BLACK, 28)
            cv2.putText(frame, f"Distance: {round(Distance,2)} CM", (30, 35),fonts, 0.6, WHITE, 2)
            
	# update the points queue
    #pts.appendleft(center)
	
	# loop over the set of tracked points, draw the line
    '''for i in range(1, len(pts)):
        # if either of the tracked points are None, ignore
		# them
        if pts[i - 1] is None or pts[i] is None:
            continue
		# otherwise, compute the thickness of the line and
		# draw the connecting lines
        thickness = int(np.sqrt(args["buffer"] / float(i + 1)) * 2.5)
        cv2.line(frame, pts[i - 1], pts[i], (0, 0, 255), thickness)


'''
    '''
    # permet de faire des actions si non centre
    if (x < 220):
        #tourner a gauche
 
    if (x > 280):
        #tourner a droite

    #permet de savoir si objet proche vs loin
    if (y < 160):
        print('proche')
 
    if (y > 210):
        print('Loin')

'''
# show the frame to our screen
    cv2.imshow("Frame", frame)
    cv2.imshow('Mask', mask)
    key = cv2.waitKey(1) & 0xFF
	# if the 'q' key is pressed, stop the loop
    if key == ord("q"):
        break
	
	

vs.stop()

# close all windows
cv2.destroyAllWindows()
